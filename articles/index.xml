<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on HXQ</title>
    <link>https://micro-hxq.github.io/articles/</link>
    <description>Recent content in Articles on HXQ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 04 Apr 2020 11:58:26 +0800</lastBuildDate>
    
	<atom:link href="https://micro-hxq.github.io/articles/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linux常用命令行工具</title>
      <link>https://micro-hxq.github.io/articles/linux-common-tools/</link>
      <pubDate>Sat, 04 Apr 2020 11:58:26 +0800</pubDate>
      
      <guid>https://micro-hxq.github.io/articles/linux-common-tools/</guid>
      <description>CPU top vmstat mpstat strace perf 内存 free vmstat top sar 网络 netstat ss sar ifconfig sysdig IO iostat blktrace iotop pidstat </description>
    </item>
    
    <item>
      <title>ElasticSearch性能优化配置</title>
      <link>https://micro-hxq.github.io/articles/elasticsearch-optimization-config/</link>
      <pubDate>Sat, 28 Mar 2020 12:09:19 +0800</pubDate>
      
      <guid>https://micro-hxq.github.io/articles/elasticsearch-optimization-config/</guid>
      <description>写入性能优化   调整translog flush间隔
index.translog.durability: request
默认的translog持久化策略时每个请求都执行flush操作，这会极大影响es的写入性能，对于数据可靠性没有严格要求的场景可以修改translog的刷盘策略，调整为周期性和满足一定大小是flush。
index.translog.durability: async
index.translog.sync_interval: 10s
默认间隔为5s。
index.translog.flush_threshold_size: 1024mb
默认为512mb，当translog超过此大小是，将执行refresh操作。
  调整索引刷新间隔时间
index.refresh_interval: 10s
默认为1s，此配置影响es的搜索结果，意味着默认情况下数据写入1秒后可以被搜索到。索引每次执行refresh操作都会产生一个车新的Lucene Segment，频段的索引refresh对导致过多的Segment merge行为。
  调整Lucene Segment合并
index.merge.scheduler.max_thread_count: 1
执行Segment合并的线程数，默认值的计算公式如下：
Math.max(1, Math.min(4, processor_count / 2))
当仅使用一块硬盘且非SSD时，应调整为1，多个线程并发写入单个硬盘会降低写入速度。
index.merge.policy.max_merged_segment: 1GB
默认为5GB，降低单个Segment的容量，避免Segment文件过大。
  调整分片缓存
indices.memory.index_buffer_size: 10%
默认大小时heap大小的10%。每个shard获得的buffer小大是该配置值除以该节点的shard数。
indices.memory.min_index_buffer_size: 48MB
默认为48MB。
indices.memory.max_index_buffer_size
默认没有上限。
  禁用_all字段
_all字段在ES6.x版本之前都是默认启用的，该字段占用空间和建立索引开销较大。通过如下方式关闭_all字段：
{ &amp;#34;mappings&amp;#34;: { &amp;#34;&amp;lt;type&amp;gt;&amp;#34;: { &amp;#34;_all&amp;#34;: { &amp;#34;enabled&amp;#34;: false }, &amp;#34;properties&amp;#34;: {...} } } } 禁用该字段可明显降低对CPU和IO的压力。</description>
    </item>
    
    <item>
      <title>vim常用技巧</title>
      <link>https://micro-hxq.github.io/articles/mastering-vim/</link>
      <pubDate>Wed, 25 Mar 2020 19:49:31 +0800</pubDate>
      
      <guid>https://micro-hxq.github.io/articles/mastering-vim/</guid>
      <description>1. vim基本技巧 1.1 基本操作   查看当前vim使用的配置文件
:echo $MYVIMRC   配置vim主题
在vim的配置文件中(.vimrc)添加如下命令，
colorscheme &amp;lt;theme-name&amp;gt; 也可使用colorscheme命令动态切换主题，在命令后面追加空格后，可使用Tab键进行主题选择。
  重新加载文件
:e[dit] &amp;lt;filename&amp;gt;   文件另存为
:w[rite] &amp;lt;filename&amp;gt;   常用移动命令的大写版本
移动命令的小写版本和大写版本在vim中有不同的处理方式，
 小写：作为常规的单词进行处理 大写：作为广义的单词进行处理，即只考虑空格分隔符作为单词分隔符。  比如&amp;quot;vim.foo-bar test&amp;quot;在小写中视为6个单词，在大写版本中视为2个单词。
  文本段落间的移动
{向后移动一个段落，}向前移动段落。
  文本修改命令
cc命令在删除本行内容时，进入插入状态，并且保留行首的缩进。
  保存撤销记录
set undofile 上述命令表示开启持久化撤销记录，通常最好也设置一下记录的保存文件路径，即set undodir=&amp;quot;&amp;lt;dir-path&amp;gt;&amp;quot;
  文本搜索
 正向搜索：/&amp;lt;keyword&amp;gt; 反向搜索：?&amp;lt;keyword&amp;gt;    帮助命令
:h[elp] &amp;lt;cmd&amp;gt; 使用help命令查看命令使用方式，通常可使用CTRL+D查看补全信息
  Header3 </description>
    </item>
    
    <item>
      <title>使用Hugo搭建个人博客</title>
      <link>https://micro-hxq.github.io/articles/build-personal-blog-using-hugo/</link>
      <pubDate>Sun, 22 Dec 2019 20:30:01 +0800</pubDate>
      
      <guid>https://micro-hxq.github.io/articles/build-personal-blog-using-hugo/</guid>
      <description>本篇记录使用Hugo搭建个人博客的流程，由于自己的博客用于记录技术文章，并不需要多么酷炫的功能，只需要展示静态文件就足够了，对比几款博客框架，最终选择Hugo来构建我的博客，下面介绍下使用Hugo搭建博客的整体步骤， 随后介绍如何将博客托管到GitHub上，并配置自己的个人域名。
1. 搭建前准备 版本的选择默认使用当前下载的版本
Windows: 使用choco包管理工具下载时切换到管理员账号权限
  hugo v0.61.0
Windows: choco install -y hugo hugo-extends
  git v2.19
Windows: choco install -y git
  2. 博客搭建 3. GitHub托管 4. 配置个人域名 配置个人域名前需要申请个人域名，申请个人域名可自行网上搜索，我是在Namecheap上面购买的个人域名。域名准备好后，需要进行一些配置，由于我们使用Cloudflare配置https，故域名配置的将DNS服务器配置成Cloudflare提供的两个DNS服务器，随后在Cloudflare中添加一条A记录，如下图所示，Name填写申请的域名，Content填写&amp;lt;username&amp;gt;.github.io的IP地址，该地址可以通过Ping &amp;lt;username&amp;gt;.github.io得到。
域名配置完成后，在本地博客目录下添加CNAME文件，其中填写自己的域名。注意，CNAME在每次发布博文后都是需要放置在public目录下，最终在GitHub代码库的根目录下。</description>
    </item>
    
  </channel>
</rss>